// –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç–∏–µ 3. –ú–∞—Å—Å–∏–≤—ã

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º

//     –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ genres —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
//     –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
//     –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
//     –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
//     –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
//     –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggae¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.

// const genres = ['Jazz', 'Blues'];
// console.log(genres);

// genres.push('Rock-n-Roll');
// console.log(genres);

// console.log(genres[0]);

// console.log(genres[genres.length - 1]);

// console.log(genres.shift());

// genres.unshift('Country', 'Reggae');
// console.log(genres);

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö
//  —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π values –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.–ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// const values = '7 11';
// // const newArr = values.split(' ');
// // console.log(newArr);
// // console.log(typeof newArr[0]);
// // console.log(typeof newArr[0] * typeof newArr[1]);
// const square = values.split(' ')[0] * values.split(' ')[1];
// console.log('–ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞: ' + square);
// // console.log(typeof square);

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏
// –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞.–ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// for (let i = 1; i <= fruits.length; i++) {
//   console.log(`${i}: ${fruits[i - 1]}`);
// }

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
//  names –∏ phones —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.–ü–æ—Ä—è–¥–∫–æ–≤—ã–π
//  –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
//  –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

// const names = 'Jacob,William,Solomon,Artemis';
// const phones = '89001234567,89001112233,890055566377,890055566300';
// for (let i = 0; i < names.split(',').length; i++) {
//   console.log(`Name: ${names.split(',')[i]} - ${phones.split(',')[i]}.`);
// }

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.
// –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º.
// –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = 'think I can fly welcome to the future or past';
// let result = string
//   .split(' ')
//   .slice(1, string.split(' ').length - 1)
//   .join(' ');
// result = result[0].toUpperCase() + result.slice(1);
// console.log(result);

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 6 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π ¬´—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç¬ª —Å—Ç—Ä–æ–∫—É (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// const result = string.split('').reverse().join('');
// console.log(string);
// console.log(result);

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 7 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞.

// v - 1:_____
// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby', 'c#', 'asic', 'f#'];
// const result = langs.sort().join(' ');
// console.log(result);

// // // v - 2:_____
// const langs = ['python', 'javascript', 'c2++', 'haskel', 'php', 'ruby', 'c1#', 'asic', 'f#', 'A3', 'A2', 'A1'];
// // const langs = ['python', 'c2++', 'php', 'c1#'];
// console.table(langs);
// for (let i = 0; i < langs.length - 1; i++) {
//   for (let j = i + 1; j < langs.length; j++) {
//     const word1 = langs[i];
//     const word2 = langs[j];
//     if (word1[0] > word2[0]) {
//       langs[i] = word2;
//       langs[j] = word1;
//     }
//     // console.log(`${word1} and ${word2}`);
//   }
// }

// console.log(langs);

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// Example 8 - –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ.
// –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª.–ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

// const numbers = [12, 17, 94, 7, 23, 37, 99, 5, 1];
// let min = numbers[0];
// for (let i = 1; i < numbers.length; i++) {
//   if (numbers[i] < min) min = numbers[i];
// }
// console.log(min); // 1

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// // –ú–µ—Ç–æ–¥ .map

// const numbers2 = [12, 17, 94, 7, 23, 37, 99, 5, 1];
// console.log(numbers2);
// numbers2.map(function (value, index, arrey) {
//   return console.log(index * value);
// });

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
// const profile = ['Oluwatobi', 'Sofela', 'codesweetly.com'];
// const [firstName, ...otherInfo] = profile;

// console.log(`firstName: ${firstName}`); // "Oluwatobi"
// console.log('otherInfo: ');
// console.log(otherInfo); // ["Sofela", "codesweetly.com"]
// console.log(profile);

// console.log(langs);

// ----------------------------------------- QUICK SORT --------------------------------------------

// function quicksort(arr) {
//   if (arr.length < 2) return arr;

//   const pivot = arr[0];
//   const left = [];
//   const right = [];

//   for (let i = 1; i < arr.length; i += 1) {
//     arr[i] < pivot ? left.push(arr[i]) : right.push(arr[i]);
//   }

//   return quicksort(left).concat(pivot, quicksort(right));
// }

// console.log(quicksort([2, 5, 3, 0, 6, 1, 4]));

// --------------------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------------------
// –ó–∞–¥–∞—á–∞ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ 9/32
//–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getExtremeElements(array), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä array - –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –º–∞—Å–∏–≤ –∑ –¥–≤–æ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ - –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ array.

// v - 1: Method .splise()
// function getExtremeElements(array) {
//   array.splice(1, array.length - 2);
//   return array;
// }
// console.log(getExtremeElements([1, 2, 3, 4, 5]));

// v - 2: Methods .slise() & .concat()
// function getExtremeElements(array) {
//   return array.slice(0, 1).concat(array.slice(-1));
// }
// console.log(getExtremeElements([1, 2, 3, 4, 5]));

// v - 3:  Methods .shift() and .pop()
// function getExtremeElements(array) {
//   return [array.shift(), array.pop()];
// }
// console.log(getExtremeElements([1, 2, 3, 4, 5]));

// v - 4: just new array
// function getExtremeElements(array) {
//   let result = [array[0], array[array.length - 1]];
//   return result;
// }
// console.log(getExtremeElements([1, 2, 3, 4, 5]));

// // v - 4-2:
// function getExtremeElements(array) {
//   return [array[0], array[array.length - 1]];
// }
// console.log(getExtremeElements([1, 2, 3, 4, 5]));

// –ó–∞–¥–∞—á–∞ –ê–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ 12/32
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é slugify(title), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ, –ø–∞—Ä–∞–º–µ—Ç—Ä title, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î slug, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞.
//     –ó–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title –±—É–¥—É—Ç—å —Ä—è–¥–∫–∏, —Å–ª–æ–≤–∞ —è–∫–∏—Ö —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ª–∏—à–µ –ø—Ä–æ–±—ñ–ª–∞–º–∏
//     –£—Å—ñ —Å–∏–º–≤–æ–ª–∏ slug –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ
//     –í—Å—ñ —Å–ª–æ–≤–∞ slug –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ —Ç–∏—Ä–µ

// const slugify = title => title.toLowerCase().split(' ').join('-');
// console.log(slugify('Welcom to Alabama'));
